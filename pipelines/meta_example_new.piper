// Meta-programming example pipeline with new syntax
// This pipeline uses meta-tasks and generation to create a security scanning pipeline
// Usage: piper run -p pipelines/meta_example_new.piper target=example.com

pipeline security_scan(target="example.com") {
  // Metadata
  meta {
    name: "Security Scan Pipeline"
    author: "Piper Team"
    description: "A security scanning pipeline generated from meta-tasks"
    version: "1.0.0"
  }
  
  // Environment variables
  env = {
    API_KEY: "your-api-key",
    MODEL: "gpt-4",
    OUTPUT_DIR: "./results"
  }
  
  // Overall pipeline description
  description = """
    A comprehensive security scanning pipeline that performs port scanning,
    vulnerability detection, and generates a detailed security report for
    a target domain.
  """
  
  // Constraints for task execution
  constraints = {
    "Port scanning should be performed first",
    "Screenshots and vulnerability checks can be performed in parallel after port scanning",
    "Analysis should begin only after all data collection is finished",
    "The report should be generated last",
    "All results should be saved to the OUTPUT_DIR directory"
  }
  
  // Meta-task definitions
  port_scan = meta_task(
    task="Perform a port scan on the target domain to identify open ports and running services",
    data_shape="A list of open ports with their associated services and versions"
  )
  
  take_screenshots = meta_task(
    task="Take screenshots of all web services found on the target",
    data_shape="A collection of screenshots of web pages, each with a URL and file path"
  )
  
  check_vulnerabilities = meta_task(
    task="Check for common web vulnerabilities like XSS, SQLi, and CSRF",
    data_shape="A list of discovered vulnerabilities with their type, severity, and description"
  )
  
  analyze_data = meta_task(
    task="Analyze all collected data for security issues and misconfigurations",
    data_shape="A comprehensive analysis of security findings with severity ratings and recommendations"
  )
  
  generate_report = meta_task(
    task="Generate a comprehensive security report with findings and recommendations",
    data_shape="A markdown-formatted security report with executive summary, findings, and recommendations"
  )
  
  // Custom task (will be included as-is in the generated pipeline)
  custom_port_scan = cmd(
    command="nmap -sV -p 1-1000 #{target} -oN #{env.OUTPUT_DIR}/nmap.txt",
    description="Custom port scanning task",
    output="port_scan_results"
  )
  
  // Generate tasks based on meta-task definitions
  tasks = generate_tasks(
    meta_tasks=[port_scan, take_screenshots, check_vulnerabilities, analyze_data, generate_report],
    custom_tasks=[custom_port_scan],
    model="#{env.MODEL}",
    style="function-call"
  )
  
  // Generate flow based on constraints
  flow_definition = generate_flow(
    tasks=tasks,
    constraints=constraints,
    description=description,
    model="#{env.MODEL}",
    visualization=true
  )
  
  // Define flow using the generated flow definition
  flow:
    flow_definition
}
