// Piper DSL Grammar - New Syntax

// Whitespace and comments
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Basic elements
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
string_literal = ${ "\"" ~ inner_string ~ "\"" }
inner_string = @{ (!("\"" | "\\") ~ ANY)* ~ (("\\" ~ ANY) ~ (!("\"" | "\\") ~ ANY)*)* }
multiline_string = ${ "\"\"\"" ~ multiline_inner ~ "\"\"\"" }
multiline_inner = @{ (!"\"\"\"" ~ ANY)* }
number = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? }
boolean = @{ "true" | "false" }

// Variable interpolation
var_interpolation = ${ "#{" ~ (identifier | property_access | fallback_expr) ~ "}" }
property_access = { identifier ~ ("." ~ identifier | "[" ~ (string_literal | identifier) ~ "]")+ }
fallback_expr = { (identifier | property_access) ~ "||" ~ (string_literal | number | boolean) }

// Basic values (non-recursive)
basic_value = {
    string_literal | 
    multiline_string | 
    number | 
    boolean | 
    var_interpolation |
    function_call |
    identifier
}

// Objects and arrays
object = {
    "{" ~ "}" |
    "{" ~ pair ~ ("," ~ pair)* ~ ","? ~ "}"
}
pair = { (identifier | string_literal) ~ ":" ~ value }

array = {
    "[" ~ "]" |
    "[" ~ value ~ ("," ~ value)* ~ ","? ~ "]"
}

// Function call
function_call = {
    identifier ~ "(" ~ (argument ~ ("," ~ argument)*)? ~ ")" |
    "meta_task" ~ "(" ~ meta_task_args ~ ")" |
    "generate_tasks" ~ "(" ~ generate_tasks_args ~ ")" |
    "generate_flow" ~ "(" ~ generate_flow_args ~ ")"
}

// Meta-task specific arguments
meta_task_args = {
    "task" ~ "=" ~ (string_literal | multiline_string) ~ ","? ~
    "data_shape" ~ "=" ~ (string_literal | multiline_string)
}

// Generate tasks specific arguments
generate_tasks_args = {
    "meta_tasks" ~ "=" ~ array ~ ","? ~
    "custom_tasks" ~ "=" ~ array ~ ","? ~
    "model" ~ "=" ~ string_literal ~ ","? ~
    "style" ~ "=" ~ string_literal?
}

// Generate flow specific arguments
generate_flow_args = {
    "tasks" ~ "=" ~ identifier ~ ","? ~
    "constraints" ~ "=" ~ identifier ~ ","? ~
    "description" ~ "=" ~ identifier ~ ","? ~
    "model" ~ "=" ~ string_literal ~ ","? ~
    "visualization" ~ "=" ~ boolean?
}

argument = {
    (identifier ~ "=" ~ value) | value
}

// Value types (including objects and arrays)
value = {
    basic_value |
    object |
    array |
    "(" ~ value ~ ")" |
    conditional_value
}

// Conditional value expression
conditional_value = {
    condition ~ "?" ~ value ~ ":" ~ value
}

// Condition expressions - restructured to avoid left-recursion
condition = { condition_term ~ (logic_op ~ condition_term)* }

condition_term = {
    comparison |
    boolean |
    var_interpolation |
    "(" ~ condition ~ ")"
}

comparison = { basic_value ~ compare_op ~ basic_value }
compare_op = { "==" | "!=" | ">" | "<" | ">=" | "<=" }
logic_op = { "&&" | "||" }

// Pipeline structure with parameters
pipeline = {
    "pipeline" ~ identifier ~ parameters? ~ "{"
        ~ (metadata | data_literal | task_definition | flow_definition)*
    ~ "}"
}

parameters = {
    "(" ~ (parameter ~ ("," ~ parameter)*)? ~ ")"
}

parameter = {
    identifier ~ ("=" ~ value)?
}

metadata = {
    "meta" ~ "{"
        ~ (identifier ~ ":" ~ value)*
    ~ "}"
}

// Named data literals
data_literal = {
    identifier ~ "=" ~ value
}

// Task definitions
task_definition = {
    identifier ~ "=" ~ (function_call | inline_command)
}

inline_command = {
    string_literal ~ ("->" ~ string_literal)?
}

// Flow definition
flow_definition = {
    "flow" ~ ":" ~ flow_expr
}

flow_expr = {
    flow_item ~ (flow_operator ~ flow_item)*
}

flow_item = {
    identifier |
    parallel_flow |
    conditional_flow |
    "(" ~ flow_expr ~ ")"
}

parallel_flow = {
    "[" ~ flow_item ~ ("," ~ flow_item)* ~ "]"
}

conditional_flow = {
    "(" ~ condition ~ "?" ~ flow_item ~ (":" ~ flow_item)? ~ ")"
}

flow_operator = { ">" }

// Entry point
file = { SOI ~ pipeline ~ EOI }
